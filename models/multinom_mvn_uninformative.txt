#Add multinomil normal distribution to the random effects

#  Basic multinomial describing how white the population is by time
#random effects on camera
#no fixed effects

model{

  #Priors and constraints
  for(i in 1:(nbins - 1)){
    alpha[i] ~ dnorm(0, 0.001)
  }

  for(i in 1:(nbins - 1)){
    beta[i] ~ dnorm(0, 0.001)
  }

  # Priors for means of multivariate normal distribution
  Mu.raw[1] ~ dunif(0,100)
  Mu.raw[2] ~ dunif(0,100)

  #  Scale is three because we are drawing 2 values and so 2 + 1
  scale <- 3

  #  The identity matrix is suggested for the expectation of the precision
  #    matrix
  R[1,1] <- 1
  R[2,2] <- 1
  R[1,2] <- 0
  R[2,1] <- 0

  # Scaled inverse Wishart prior
  Sigma2.inv.raw ~ dwish(R, scale) # R = 2x2 identity matrix, scale = 3

  # Scaling parameter for inverse wishart
  xi1 ~ dunif(0, 100)
  xi2 ~ dunif(0, 100)

  # Rescale parameters to the scale of the data
  Sigma2.raw <- inverse(Sigma2.inv.raw)

  #  Standard deviation of precision matrix
  sigma[1] <- sqrt(Sigma2.raw[1,1]) * xi1 # rescaled standard deviation of vector[,1]
  sigma[2] <- sqrt(Sigma2.raw[2,2]) * xi2 # rescaled standard deviation of vector[,2]

  #  Correlation of category 1 to category 2
  rho <- Sigma2.raw[1,2]/sqrt(Sigma2.raw[1,1]*Sigma2.raw[2,2])

  #  Rescaled mean value for category 1 and 2
  cat_mu[1] <- mu.raw[1] * xi1
  cat_mu[2] <- mu.raw[2] * xi2

  #  Draw effect of camera for each category admitting they are correlated
  for(c in 1:ncam){
    cam_eff[1:2, c] ~ dmnorm(cat_mu[], Sigma2.inv.raw[1:2,1:2])
    vector[i,1] <- vector.raw[i,1] * xi1
    vector[i,2] <- vector.raw[i,2] * xi2
    vector.raw[i,1:2] ~ dmnorm(Mu.raw, Sigma2.inv.raw)
  }

  for(c in 1:ncam){
    for(d in 1:ndays){
      log(p_exp[1,c,d]) <- alpha[1] +
        beta[1] * d +
        cam_eff[1,c]

      log(p_exp[2,c,d]) <- alpha[2] +
        beta[2] * d +
        cam_eff[2,c]

      log(p_exp[3,c,d]) <- 0

      p_sum[c,d] <- sum(p_exp[,c,d])

      p_rand[1,c,d] <- p_exp[1,c,d]/p_sum[c,d]
      p_rand[2,c,d] <- p_exp[2,c,d]/p_sum[c,d]
      p_rand[3,c,d] <- p_exp[3,c,d]/p_sum[c,d]
    }
  }

  for(i in 1:nobs){
    y[i] ~ dcat(p_rand[,cam[i],day[i]])
  }


  #  Derived to strip off random camera effect
  for(d in 1:ndays){
    log(pp_exp[1,d]) <- alpha[1] +
      beta[1] * d
    log(pp_exp[2,d]) <- alpha[2] +
      beta[2] * d
    log(pp_exp[3,d]) <- 0

    pp_sum[d] <- sum(pp_exp[,d])

    pp[1,d] <- pp_exp[1,d]/pp_sum[d]
    pp[2,d] <- pp_exp[2,d]/pp_sum[d]
    pp[3,d] <- pp_exp[3,d]/pp_sum[d]
  }
}
